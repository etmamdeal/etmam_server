"""refactor_models_runlog_userscript_product_cti

Revision ID: manual_placeholder_rev
Revises:
Create Date: 2025-05-30 12:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
# Assuming db.JSON in models.py maps to sa.JSON
# If using a specific dialect for JSON (e.g. postgresql.JSON), it might be needed here,
# but for SQLite, sa.JSON often works or falls back to TEXT.
# For this placeholder, sa.JSON should be fine.

# revision identifiers, used by Alembic.
revision = 'manual_placeholder_rev'
down_revision = None # This will be the first migration
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Create users table
    op.create_table('users',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('username', sa.String(length=80), nullable=False),
        sa.Column('password', sa.String(length=200), nullable=False),
        sa.Column('full_name', sa.String(length=120), nullable=False),
        sa.Column('email', sa.String(length=120), nullable=False),
        sa.Column('phone', sa.String(length=20), nullable=True),
        sa.Column('role', sa.String(length=20), nullable=False, default='user'),
        sa.Column('permissions', sa.Text(), nullable=True, default='[]'),
        sa.Column('is_active', sa.Boolean(), nullable=True, default=True),
        sa.Column('created_at', sa.DateTime(), nullable=True, default=sa.func.now()),
        sa.Column('last_login', sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
        sa.UniqueConstraint('email', name=op.f('uq_users_email')),
        sa.UniqueConstraint('username', name=op.f('uq_users_username'))
    )

    # Create scripts table
    op.create_table('scripts',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('file_path', sa.String(length=255), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=True, default=sa.func.now()),
        sa.Column('updated_at', sa.DateTime(), nullable=True, default=sa.func.now(), onupdate=sa.func.now()),
        sa.Column('parameters', sa.JSON(), nullable=True),
        sa.Column('created_by', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_scripts_created_by_users')),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_scripts'))
    )

    # Create user_script table
    op.create_table('user_script',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('script_id', sa.Integer(), nullable=False),
        sa.Column('config_data', sa.JSON(), nullable=True, default={}),
        sa.Column('assigned_at', sa.DateTime(), nullable=True, default=sa.func.now()),
        sa.Column('assigned_by', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['assigned_by'], ['users.id'], name=op.f('fk_user_script_assigned_by_users'), ondelete='SET NULL'),
        sa.ForeignKeyConstraint(['script_id'], ['scripts.id'], name=op.f('fk_user_script_script_id_scripts'), ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_user_script_user_id_users'), ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_user_script')),
        sa.UniqueConstraint('user_id', 'script_id', name='uq_user_script_user_id_script_id')
    )

    # Create product table (base for CTI)
    op.create_table('product',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.Column('description', sa.Text(), nullable=False),
        sa.Column('type', sa.String(length=20), nullable=False), # script, ebook, database
        sa.Column('price', sa.Float(), nullable=False),
        sa.Column('image_url', sa.String(length=200), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=True, default=True),
        sa.Column('created_at', sa.DateTime(), nullable=True, default=sa.func.now()),
        sa.Column('created_by', sa.Integer(), nullable=False),
        sa.Column('last_modified', sa.DateTime(), nullable=True, default=sa.func.now(), onupdate=sa.func.now()),
        sa.Column('last_modified_by', sa.Integer(), nullable=True),
        sa.Column('script_id', sa.Integer(), nullable=True), # FK to scripts table for 'script' type products
        sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_product_created_by_users')),
        sa.ForeignKeyConstraint(['last_modified_by'], ['users.id'], name=op.f('fk_product_last_modified_by_users')),
        sa.ForeignKeyConstraint(['script_id'], ['scripts.id'], name=op.f('fk_product_script_id_scripts')),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_product')),
        sa.UniqueConstraint('name', name=op.f('uq_product_name'))
    )

    # Create ebooks table (child for CTI)
    op.create_table('ebooks',
        sa.Column('product_id', sa.Integer(), nullable=False),
        sa.Column('author', sa.String(length=100), nullable=False),
        sa.Column('category', sa.String(length=50), nullable=True),
        sa.Column('file_path', sa.String(length=200), nullable=False),
        sa.Column('cover_path', sa.String(length=200), nullable=True),
        sa.ForeignKeyConstraint(['product_id'], ['product.id'], name=op.f('fk_ebooks_product_id_product'), ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('product_id', name=op.f('pk_ebooks'))
    )

    # Create databases table (child for CTI)
    op.create_table('databases',
        sa.Column('product_id', sa.Integer(), nullable=False),
        sa.Column('db_technology_type', sa.String(length=50), nullable=True),
        sa.Column('size', sa.String(length=50), nullable=True),
        sa.Column('file_path', sa.String(length=200), nullable=False),
        sa.ForeignKeyConstraint(['product_id'], ['product.id'], name=op.f('fk_databases_product_id_product'), ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('product_id', name=op.f('pk_databases'))
    )

    # Create run_log table
    op.create_table('run_log',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('script_id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('status', sa.String(length=20), nullable=False),
        sa.Column('output', sa.Text(), nullable=True),
        sa.Column('error', sa.Text(), nullable=True),
        sa.Column('executed_at', sa.DateTime(), nullable=True, default=sa.func.now()),
        sa.Column('user_script_id', sa.Integer(), nullable=False), # New FK to user_script.id
        sa.ForeignKeyConstraint(['script_id'], ['scripts.id'], name=op.f('fk_run_log_script_id_scripts')),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_run_log_user_id_users')),
        sa.ForeignKeyConstraint(['user_script_id'], ['user_script.id'], name=op.f('fk_run_log_user_script_id_user_script')),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_run_log'))
    )

    # Create subscriptions table
    op.create_table('subscriptions',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('product_id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('period_months', sa.Integer(), nullable=False),
        sa.Column('start_date', sa.DateTime(), nullable=False, default=sa.func.now()),
        sa.Column('end_date', sa.DateTime(), nullable=False),
        sa.Column('is_active', sa.Boolean(), nullable=True, default=True),
        sa.Column('created_at', sa.DateTime(), nullable=True, default=sa.func.now()),
        sa.ForeignKeyConstraint(['product_id'], ['product.id'], name=op.f('fk_subscriptions_product_id_product')),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_subscriptions_user_id_users')),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_subscriptions'))
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('subscriptions')
    op.drop_table('run_log')
    op.drop_table('databases')
    op.drop_table('ebooks')
    op.drop_table('product')
    op.drop_table('user_script')
    op.drop_table('scripts')
    op.drop_table('users')
    # ### end Alembic commands ###
